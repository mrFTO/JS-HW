// 1. Объясните почему код даёт именно такие результаты?

// пример 1
let a = 1,
  b = 1,
  c,
  d; // Объявляем переменные, присваиваем значения 1 переменным a и b
c = ++a; // Присваиваем переменной с значение переменной a, увеличенное на единицу
alert(c); // Выводим сообщение со значением переменной c, ответ: 2

// пример 2
d = b++;
alert(d); //ответ: 1, вероятно, отображение увеличения на единицу не происходит, если ++ стоит после значения переменной, либо оно происходит после отображения значения переменной.

// пример 3
c = 2 + ++a;
alert(c); //ответ: 5, Значение переменной a было снова увеличено на единицу, поэтому должно получиться 2+3=5

// пример 4
d = 2 + b++;
alert(d); //ответ: 4, значение переменной b было увеличено на единицу после отображения и теперь должно быть равно 2, таким образом 2+2=4

alert(a); //3, значение переменной a больше не увеличивалось и равно 3
alert(b); //3, значение переменной b было снова увеличено на единицу после отображения и теперь тоже равно 3

// 2. Чему будут равны переменные x и a в примере ниже? Написать почему так произошло
// (описать последовательность действий).
a = 2; //Задаем переменной a значение 2
let x = 1 + (a *= 2); //Задаем переменную x со значением, которое вычисляется в результате суммы единицы и измененного на 2 значения переменной a. Таким образом, должно получиться, что переменная a имеет значение 2*2=4, 1+4=5, следовательно
//a = 4, x = 5.

// 3. Объявить две переменные a и b и задать им целочисленные произвольные начальные значения.
// Затем написать скрипт, который работает по следующему принципу:
// - если a и b положительные, вывести их разность (ноль можно считать положительным числом);
// - если а и b отрицательные, вывести их произведение;
// - * (этот пункт по сложнее, делайте по желанию) если а и b разных знаков, вывести их сумму;
a = 1;
b = 5;
if (a >= 0 && b >= 0) {
  console.log(a - b);
} else if (a < 0 && b < 0) {
  console.log(a * b);
} else if (a * b < 0) {
  console.log(a + b);
}

// 4. Реализовать основные 4 арифметические операции (+, -, /, *) в виде функций с
// двумя параметрами. Т.е. например, функция для сложения должна принимать два числа,
// складывать их и возвращать результат. Обязательно использовать оператор return.
("use strict");

/**
 * Функция складывает переданные параметры.
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */
function addition(a, b) {
  return a + b;
}

/**
 * Функция из параметра "а" вычитает параметр "b".
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */
function subtraction(a, b) {
  return a - b;
}

/**
 * Функция делит параметр "a" на параметр "b".
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */
function division(a, b) {
  return a / b;
}

/**
 * Функция умножает параметры.
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */
function multiplication(a, b) {
  return a * b;
}

// 5. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
// где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от
// переданного значения операции (использовать switch) выполнить одну из арифметических операций
// (использовать функции из задания 4) и вернуть полученное значение.

("use strict");

/**
 * Функция складывает переданные параметры.
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */
function addition(a, b) {
  return a + b;
}

/**
 * Функция из параметра "а" вычитает параметр "b".
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */
function subtraction(a, b) {
  return a - b;
}

/**
 * Функция делит параметр "a" на параметр "b".
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */
function division(a, b) {
  return a / b;
}

/**
 * Функция умножает параметры.
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */
function multiplication(a, b) {
  return a * b;
}

/**
 * Функция получает два числа и осуществляет над ними математическу операцию.
 * @param {number} arg1
 * @param {number} arg2
 * @param {string} operation может быть "+", "-", "/", "*".
 * @throws {Error} если передана не предусмотренная операция, то будет
 * выброшена ошибка.
 * @returns {number}
 */
function mathOperation(arg1, arg2, operation) {
  switch (operation) {
    case "+":
      return addition(arg1, arg2);
    case "-":
      return subtraction(arg1, arg2);
    case "/":
      return division(arg1, arg2);
    case "*":
      return multiplication(arg1, arg2);
    default:
      throw new Error("Операция " + operation + " не предусмотрена");
  }
}

console.log(mathOperation(3, 5, "+"));
console.log(mathOperation(3, 5, "-"));
console.log(mathOperation(3, 5, "/"));
console.log(mathOperation(3, 5, "*"));
console.log(mathOperation(3, 5, "lorem"));
